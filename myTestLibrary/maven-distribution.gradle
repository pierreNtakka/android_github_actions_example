apply plugin: 'maven-publish'

def mavenDistrTaskGroupName = "maven"
def refBuildType = "release"
def mavenSdkPublicationTaskNamePrefix = "myTestLibraryLib"
def mavenPublicationPlaceholderTaskName = "publish${mavenSdkPublicationTaskNamePrefix.capitalize()}%sPublicationToGitHubPkgRepository"
def flavorUploadMavenPrefixTaskName = "uploadToGitHubPkg"

publishing {
    publications {

        android.libraryVariants.all { variant ->
            if (variant.buildType.name == refBuildType) {

                def flavorName = variant.productFlavors[0].name
                def artifactVersionName = "${BUILD_MAVEN_SDK_VERSION}-${flavorName}-release"

                "${mavenSdkPublicationTaskNamePrefix}${variant.name.capitalize()}"(MavenPublication) {
                    groupId "com.pditta.githubactions"
                    artifactId "mytestlibrary"
                    version artifactVersionName
                    artifact "$buildDir/outputs/aar/myTestLibrary-${variant.name}.aar"

                    pom.withXml {

                        def dependenciesNode = asNode().appendNode('dependencies')
                        configurations.implementation.allDependencies.each {
                            addDependency(it, dependenciesNode)
                        }

                        configurations.getByName("${flavorName}Implementation").allDependencies.each {
                            addDependency(it, dependenciesNode)
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPkg"
            url = uri("https://maven.pkg.github.com/pierreNtakka/android_github_actions_example")
            credentials {
                username = "${System.getenv("GPR_USER")}"
                password = "${System.getenv("GPR_API_KEY")}"
            }
        }
    }
}

def addDependency(dependency, dependenciesNode) {
    def dependencyNode = dependenciesNode.appendNode('dependency')
    dependencyNode.appendNode('groupId', dependency.group)
    dependencyNode.appendNode('artifactId', dependency.name)
    dependencyNode.appendNode('version', dependency.version)
}

android.libraryVariants.configureEach { variant ->

    def variantName = "${variant.name.capitalize()}"
    def assembleVariantName = "assemble${variantName}"

    def unitTestTaskName = "test${variantName}UnitTest"

    if (variant.buildType.name == refBuildType) {

        def mavenPublicationTaskName = String.format(mavenPublicationPlaceholderTaskName, variantName)
        tasks.named(mavenPublicationTaskName).get().dependsOn(assembleVariantName)

        tasks.register("${flavorUploadMavenPrefixTaskName}${variantName}") {
            group = mavenDistrTaskGroupName
            description = "Assemble ${variantName} and publish the ${variantName} SDK to Maven Repository"
            dependsOn clean.name
            dependsOn unitTestTaskName
            dependsOn assembleVariantName
            dependsOn mavenPublicationTaskName

            tasks.named(assembleVariantName).get().dependsOn(unitTestTaskName)
            tasks.named(unitTestTaskName).get().mustRunAfter(clean)
            tasks.named(assembleVariantName).get().mustRunAfter(unitTestTaskName)
            tasks.named(mavenPublicationTaskName).get().mustRunAfter(assembleVariantName)
        }
    }
}


task incrementMavenVersion(name: this.name, group: mavenDistrTaskGroupName) {
    description "Increment the api-module SDK versionCode and versionName"
    doLast {
        ant.propertyfile(file: "../gradle.properties") {

            def splittedVersion = BUILD_MAVEN_SDK_VERSION.split("\\.")

            def major = splittedVersion[0].toInteger()
            def minor = splittedVersion[1].toInteger()
            def patch = splittedVersion[2].toInteger()
            def buildNumber = splittedVersion[3].toInteger() + 1

            BUILD_MAVEN_SDK_VERSION = "${major}.${minor}.${patch}.${buildNumber}"
            entry(key: "BUILD_MAVEN_SDK_VERSION", value: BUILD_MAVEN_SDK_VERSION)

            def sdkVersionCode = SDK_VERSION_CODE.toInteger() + 1
            SDK_VERSION_CODE = sdkVersionCode
            entry(key: "SDK_VERSION_CODE", value: SDK_VERSION_CODE.toInteger())
        }
    }
}
