name: CI Test Step

on:
  workflow_dispatch:
    inputs:
      debug:
        type: boolean
        description: Printa dei valori che aiutano il debug
        default: false
      mavenSdk:
        type: boolean
        description: Effettua il rilascio del SDK (tutti gli env) sul Gitlab Package Registry
        default: false

jobs:

  jobs:
    create-branch:
      runs-on: ubuntu-latest

      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Set up Git
          run: |
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"

        - name: Create and push new branch
          run: |
            NEW_BRANCH="creating-release-$(date +%Y%m%d-%H%M%S)" # Nome con timestamp
            git checkout -b "$NEW_BRANCH"
            git push origin "$NEW_BRANCH"
            echo "New branch $NEW_BRANCH created and pushed"
  
  

  deliverable:
    runs-on: ubuntu-latest
    env:
      GPR_USER: ${{ github.actor }}
      GPR_API_KEY: ${{ secrets.MAVEN_UPLOAD_TOKEN }}

    steps:
      - name: Checkout Project
        uses: actions/checkout@v4

      - name: Set up JDK 20
        uses: actions/setup-java@v4
        with:
          java-version: '20'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create service credentials file using Python
        run: |
          mkdir -p config
          python -c "import os; open('config/firebase-app-distr-key.json', 'w').write(os.getenv('APP_DISTR_FILE_CONTENT_KEY'))"
          echo "GITHUB_ACTIONS_EXAMPLE_APP_DISTR_FILE_KEY=$PWD/config/firebase-app-distr-key.json" >> $GITHUB_ENV
        env:
          APP_DISTR_FILE_CONTENT_KEY: ${{ secrets.APP_DISTR_FILE_CONTENT_KEY }}

      - name: Test Gradle env variable used
        run: ./gradlew retrieveEnvVariables
        if: ${{ github.event.inputs.debug == 'true' }}

      - name: Assemble devDebug
        run: ./gradlew uploadToAppDistributionUatDebug

      - name: Clean up JSON file and environment variable
        if: always()
        run: |
          # Remove the file if it exists
          if [ -f "$GITHUB_ACTIONS_EXAMPLE_APP_DISTR_FILE_KEY" ]; then
            rm $GITHUB_ACTIONS_EXAMPLE_APP_DISTR_FILE_KEY
            echo "JSON file removed."
          else
            echo "No JSON file found."
          fi
          
          # Remove the environment variable
          echo "Removing the GITHUB_ACTIONS_EXAMPLE_APP_DISTR_FILE_KEY environment variable."
          unset GITHUB_ACTIONS_EXAMPLE_APP_DISTR_FILE_KEY