name: Test delete snippets

on:
  workflow_dispatch:
    inputs:
      debug:
        type: boolean
        description: Printa dei valori che aiutano il debug
        default: true

env:
  PACKAGE_NAME: "com.pditta.githubactions.mytestlibrary"
  VERSION_PREFIX: "25.03.0.16"
  TAG_NAME: ${{ env.TAG_NAME }}

jobs:
  clean-package-registry:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flavour: [ dev-release, uat-release, preProd-release, prod-release ]
    steps:
      - name: Delete ${{ env.VERSION_TO_DELETE }}
        id: delete_pkg_registry
        env:
          VERSION_TO_DELETE: ${{ env.VERSION_PREFIX }}-${{ matrix.flavour }}
        shell: bash
        run: |
          # Ottieni tutte le versioni del pacchetto
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/user/packages/maven/$PACKAGE_NAME/versions")

          echo "$response"

          # Estrai l'ID della versione specifica (cerca per il nome della versione)
          version_id=$(echo "$response" | jq -r ".[] | select(.name == \"$VERSION_TO_DELETE\") | .id")

          # Verifica se abbiamo trovato l'ID
          if [ -z "version_id" ]; then
            echo "La versione $VERSION_TO_DELETE esiste, procedo con la cancellazione."

            delete_response=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
                                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                                "https://api.github.com/user/packages/maven/$PACKAGE_NAME/versions/$version_id")

            if [ "$delete_response" -eq 204 ]; then
              echo "La versione $VERSION_TO_DELETE è stata cancellata con successo."
            elif [ "$delete_response" -eq 404 ]; then
              echo "Errore: La versione $VERSION_TO_DELETE non è stata trovata per la cancellazione."
              exit 1
            else
              echo "Errore nella cancellazione. Codice di stato: $delete_response"
              exit 1
            fi
          else
            echo "La versione $VERSION_TO_DELETE non esiste, niente da cancellare."
          fi

  remove-tag-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Set up Git
        uses: ./.github/actions/setup-git

      - name: Delete GitHub Release
        if: ${{ steps.check_tag.outputs.TAG_EXISTS == 'true' }}
        run: |
          release_id=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.TAG_NAME }}" | jq -r '.id')

          echo "$release_id"

          if [ "$release_id" != "null" ]; then
            delete_response=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$release_id")

            if [ "$delete_response" -eq 204 ]; then
              echo "La release associata al tag ${{ env.TAG_NAME }} è stata cancellata con successo."
            elif [ "$delete_response" -eq 404 ]; then
              echo "Errore: La release associata al tag ${{ env.TAG_NAME }} non è stata trovata per la cancellazione."
              exit 1
            else
              echo "Errore nella cancellazione della release. Codice di stato: $delete_response"
              exit 1
            fi
          else
            echo "Nessuna release associata al tag ${{ env.TAG_NAME }} trovata."
          fi