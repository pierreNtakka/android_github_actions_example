name: Lib into PKG Registry and App into Firebase App Distr

on:
  workflow_dispatch:
    inputs:
      debug:
        type: boolean
        description: Printa dei valori che aiutano il debug
        default: false
      incrementVersion:
        type: boolean
        description: Incrementa la version
        default: true
env:
  GRADLE_PROPERTIES_FILENAME: "gradle.properties"
  
jobs:
  create-branch:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.create_branch.outputs.branch_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        uses: ./.github/actions/setup-git

      - name: Create and push new branch
        id: create_branch
        run: |
          NEW_BRANCH="creating-release-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$NEW_BRANCH"
          git push origin "$NEW_BRANCH"
          echo "branch_name=$NEW_BRANCH" >> $GITHUB_OUTPUT
          echo "New branch $NEW_BRANCH created and pushed"

  testing:
    needs: create-branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch ${{ needs.create-branch.outputs.branch_name }}
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-branch.outputs.branch_name }}

      - name: Print working branch value
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          echo "Working branch is: ${{ needs.create-branch.outputs.branch_name }}"
          
      - name: Set up Gradlew
        uses: ./.github/actions/setup-gradle
        with:
          debug: ${{ github.event.inputs.debug }}

      - name: Execute testing
        run: |
          ./gradlew :app:testing

  increment-version:
    needs: [ create-branch, testing ]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.incrementVersion == 'true' }}
    steps:
      - name: Checkout branch ${{ needs.create-branch.outputs.branch_name }}
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-branch.outputs.branch_name }}

      - name: Print working branch value
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          echo "Working branch is: ${{ needs.create-branch.outputs.branch_name }}"

      - name: Disable local implementation
        run: |
          sed -i "s|^ENABLE_LOCAL_IMPLEMENTATION=.*|ENABLE_LOCAL_IMPLEMENTATION=false|" "$GRADLE_PROPERTIES_FILENAME"

      - name: Print Version properties PRE incremented
        run: python scripts/print_gradle_properties.py --gradleFileName ${{ env.GRADLE_PROPERTIES_FILENAME }} --debug ${{ inputs.debug }}
        
      - name: Increment App and SDK Version
        run: python scripts/increment_version.py --gradleFileName ${{ env.GRADLE_PROPERTIES_FILENAME }}

      - name: Print Version properties POST incremented
        run: python scripts/print_gradle_properties.py --gradleFileName ${{ env.GRADLE_PROPERTIES_FILENAME }} --debug ${{ inputs.debug }}

      - name: Set up Git
        uses: ./.github/actions/setup-git
      
      - name: Commit And Push the incremented Version
        run: |
          appDemoVersionCode=$(grep -E "^[^#]*APP_DEMO_VERSION_CODE=" "$GRADLE_PROPERTIES_FILENAME" | cut -d'=' -f2-)
          releaseVersionName=$(grep -E "^[^#]*RELEASE_VERSION_NAME=" "$GRADLE_PROPERTIES_FILENAME" | cut -d'=' -f2-)
          buildMavenSdkVersion=$(grep -E "^[^#]*BUILD_MAVEN_SDK_VERSION=" "$GRADLE_PROPERTIES_FILENAME" | cut -d'=' -f2-)
          
          git add .
          git commit -m "chore: Update app versionCode to: $appDemoVersionCode and versionName: $releaseVersionName and maven version $buildMavenSdkVersion"
          git push

  upload-app-demo:
    needs: [ create-branch, testing, increment-version ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flavour: [ DevDebug, UatDebug, PreProdDebug, ProdDebug ]
    steps:
      - name: Checkout branch ${{ needs.create-branch.outputs.branch_name }}
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-branch.outputs.branch_name }}

      - name: Print working branch value
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          echo "Working branch is: ${{ needs.create-branch.outputs.branch_name }}"

      - name: Create Firebase App Keys
        run: python scripts/config_app_distr.py --appDistrAuthFileJson ${{ secrets.APP_DISTR_FILE_CONTENT_KEY }}

      - name: Upload App Demo ${{ matrix.flavour }}
        run: ./gradlew uploadToAppDistribution${{ matrix.flavour }}

      - name: Clean up JSON file and environment variable
        if: always()
        run: |
          # Remove the file if it exists
          if [ -f "$GITHUB_ACTIONS_EXAMPLE_APP_DISTR_FILE_KEY" ]; then
            rm $GITHUB_ACTIONS_EXAMPLE_APP_DISTR_FILE_KEY
            echo "JSON file removed."
          else
            echo "No JSON file found."
          fi
          
          # Remove the environment variable
          echo "Removing the GITHUB_ACTIONS_EXAMPLE_APP_DISTR_FILE_KEY environment variable."
          unset GITHUB_ACTIONS_EXAMPLE_APP_DISTR_FILE_KEY
  

  upload-sdk:
    needs: [ create-branch, increment-version, testing ]
    runs-on: ubuntu-latest
    env:
      GPR_USER: ${{ github.actor }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        flavour: [ DevRelease, UatRelease, PreProdRelease, ProdRelease ]
    steps:
      - name: Checkout branch ${{ needs.create-branch.outputs.branch_name }}
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-branch.outputs.branch_name }}

      - name: Print working branch value
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          echo "Working branch is: ${{ needs.create-branch.outputs.branch_name }}"
          
      - name: Upload SDK ${{ matrix.flavour }}
        run: ./gradlew uploadToGitHubPkg${{ matrix.flavour }}

  create-release:
    needs: [ create-branch, increment-version,testing, upload-sdk, upload-app-demo ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Set up Git
        uses: ./.github/actions/setup-git

      - name: Git merge ${{ needs.create-branch.outputs.branch_name }} into current
        run: |
          git fetch origin ${{ needs.create-branch.outputs.branch_name }}
          git merge origin/${{ needs.create-branch.outputs.branch_name }}
          
          sed -i "s|^ENABLE_LOCAL_IMPLEMENTATION=.*|ENABLE_LOCAL_IMPLEMENTATION=true|" "$GRADLE_PROPERTIES_FILENAME"
          sed -i "s|^IS_FIRST_RELEASE=.*|IS_FIRST_RELEASE=false|" "$GRADLE_PROPERTIES_FILENAME"
          sed -i "s|^IS_FIRST_RELEASE=.*|IS_FIRST_RELEASE=false|" "$GRADLE_PROPERTIES_FILENAME"

          git add .
          git commit -m "chore: enable local implementation"
          git push

      - name: Git Tag
        id: create_git_tag
        run: |
          GIT_TAG_NAME=$(grep -E "^[^#]*BUILD_MAVEN_SDK_VERSION=" "$GRADLE_PROPERTIES_FILENAME" | cut -d'=' -f2-)
          
          echo "GIT_TAG_NAME=$GIT_TAG_NAME" >> $GITHUB_OUTPUT
          
          git tag $GIT_TAG_NAME
          git push origin $GIT_TAG_NAME

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_git_tag.outputs.GIT_TAG_NAME }}
          release_name: Release ${{ steps.create_git_tag.outputs.GIT_TAG_NAME }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false

  clean:
    runs-on: ubuntu-latest
    needs: [ create-branch, increment-version,testing, upload-sdk, upload-app-demo, create-release ]
    if: always()
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4

      - name: Set up Git
        uses: ./.github/actions/setup-git

      - name: Delete branch
        run: |
          git push origin --delete ${{ needs.create-branch.outputs.branch_name }}