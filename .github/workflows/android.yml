name: Lib into PKG Registry and App into Firebase App Distr

on:
  workflow_dispatch:
    inputs:
      debug:
        type: boolean
        description: Printa dei valori che aiutano il debug
        default: false
      incrementVersion:
        type: boolean
        description: Incrementa la versione dell'app e del SDK
        default: true

env:
  GRADLE_PROPERTIES: "gradle.properties"

jobs:
  create-branch:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.create_branch.outputs.branch_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        uses: ../actions/setup-git/action.yml

      - name: Create and push new branch
        id: create_branch
        run: |
          NEW_BRANCH="creating-release-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$NEW_BRANCH"
          git push origin "$NEW_BRANCH"
          echo "branch_name=$NEW_BRANCH" >> $GITHUB_OUTPUT
          echo "New branch $NEW_BRANCH created and pushed"

  testing:
    needs: create-branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch ${{ needs.create-branch.outputs.branch_name }}"
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-branch.outputs.branch_name }}

      - name: Print working branch value
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          echo "Working branch is: ${{ needs.create-branch.outputs.branch_name }}"

      - name: Set up JDK 20
        uses: actions/setup-java@v4
        with:
          java-version: '20'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Print Java & Gradle version
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          java --version
          ./gradlew --version

      - name: Execute testing
        run: |
          ./gradlew :app:testing

  increment-version:
    needs: [ create-branch, testing ]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.incrementVersion == 'true' }}
    steps:
      - name: Checkout branch ${{ needs.create-branch.outputs.branch_name }}"
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-branch.outputs.branch_name }}

      - name: Print working branch value
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          echo "Working branch is: ${{ needs.create-branch.outputs.branch_name }}"

      - name: Disable local implementation
        run: |
          sed -i "s|^ENABLE_LOCAL_IMPLEMENTATION=.*|ENABLE_LOCAL_IMPLEMENTATION=false|" "gradle.properties"

      - name: Check current ENABLE_LOCAL_IMPLEMENTATION variable
        if: ${{ github.event.inputs.debug == 'true'}}
        run: |
          
          enableLocalImpl=$(grep -E "^[^#]*ENABLE_LOCAL_IMPLEMENTATION=" "${{}}" | cut -d'=' -f2-)
          echo "${enableLocalImpl}"

      - name: Print Version properties PRE incremented
        uses: ./../actions/print-gradle-properties/action.yml

      - name: Increment App and SDK Version
        run: |
          gradleProperties="gradle.properties"
          
          IS_FIRST_RELEASE=$(grep -E "^IS_FIRST_RELEASE=" "$GRADLE_PROPERTIES" | cut -d'=' -f2)
          IS_FIRST_MAVEN_RELEASE=$(grep -E "^IS_FIRST_MAVEN_RELEASE=" "$GRADLE_PROPERTIES" | cut -d'=' -f2)
          APP_DEMO_VERSION_CODE=$(grep -E "^APP_DEMO_VERSION_CODE=" "$GRADLE_PROPERTIES" | cut -d'=' -f2)
          BUILD_MAVEN_SDK_VERSION=$(grep -E "^BUILD_MAVEN_SDK_VERSION=" "$GRADLE_PROPERTIES" | cut -d'=' -f2)
          
          if [ "$IS_FIRST_RELEASE" == "false" ]; then
            NEW_APP_DEMO_VERSION_CODE=$((APP_DEMO_VERSION_CODE + 1))
            sed -i "s/^APP_DEMO_VERSION_CODE=.*/APP_DEMO_VERSION_CODE=$NEW_APP_DEMO_VERSION_CODE/" "$GRADLE_PROPERTIES"
          fi
          
          if [ "$IS_FIRST_MAVEN_RELEASE" == "false" ]; then
            PREFIX=$(echo "$BUILD_MAVEN_SDK_VERSION" | rev | cut -d'.' -f2- | rev) 
            LAST_NUMBER=$(echo "$BUILD_MAVEN_SDK_VERSION" | rev | cut -d'.' -f1 | rev) 
            NEW_LAST_NUMBER=$((LAST_NUMBER + 1))
            NEW_BUILD_MAVEN_SDK_VERSION="$PREFIX.$NEW_LAST_NUMBER"
            sed -i "s/^BUILD_MAVEN_SDK_VERSION=.*/BUILD_MAVEN_SDK_VERSION=$NEW_BUILD_MAVEN_SDK_VERSION/" "$GRADLE_PROPERTIES"
          fi

      - name: Print Version properties POST incremented
        uses: ./../actions/print-gradle-properties/action.yml

      - name: Set up Git
        uses: ../actions/setup-git/action.yml

      - name: Commit And Push the incremented Version
        run: |
          appDemoVersionCode=$(grep -E "^[^#]*APP_DEMO_VERSION_CODE=" "$gradlePropertyFileName" | cut -d'=' -f2-)
          releaseVersionName=$(grep -E "^[^#]*RELEASE_VERSION_NAME=" "$gradlePropertyFileName" | cut -d'=' -f2-)
          buildMavenSdkVersion=$(grep -E "^[^#]*BUILD_MAVEN_SDK_VERSION=" "$gradlePropertyFileName" | cut -d'=' -f2-)
          
          git add .
          git commit -m "chore: Update app versionCode to: $appDemoVersionCode and versionName: $releaseVersionName and maven version $buildMavenSdkVersion"
          git push

  upload-app-demo:
    needs: [ create-branch, testing, increment-version ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flavour: [ DevDebug, UatDebug, PreProdDebug, ProdDebug ]
    steps:
      - name: Checkout branch ${{ needs.create-branch.outputs.branch_name }}"
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-branch.outputs.branch_name }}

      - name: Print working branch value
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          echo "Working branch is: ${{ needs.create-branch.outputs.branch_name }}"

      - name: Set up JDK 20
        uses: actions/setup-java@v4
        with:
          java-version: '20'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Print Java & Gradle version
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          java --version
          ./gradlew --version

      - name: Create Firebase App Keys
        env:
          APP_DISTR_FILE_CONTENT_KEY: ${{ secrets.APP_DISTR_FILE_CONTENT_KEY }}
        run: |
          mkdir -p config
          python -c "import os; open('config/firebase-app-distr-key.json', 'w').write(os.getenv('APP_DISTR_FILE_CONTENT_KEY'))"
          echo "GITHUB_ACTIONS_EXAMPLE_APP_DISTR_FILE_KEY=$PWD/config/firebase-app-distr-key.json" >> $GITHUB_ENV

      - name: Upload App Demo ${{ matrix.flavour }}
        run: ./gradlew uploadToAppDistribution${{ matrix.flavour }}

      - name: Clean up JSON file and environment variable
        if: always()
        run: |
          # Remove the file if it exists
          if [ -f "$GITHUB_ACTIONS_EXAMPLE_APP_DISTR_FILE_KEY" ]; then
            rm $GITHUB_ACTIONS_EXAMPLE_APP_DISTR_FILE_KEY
            echo "JSON file removed."
          else
            echo "No JSON file found."
          fi
          
          # Remove the environment variable
          echo "Removing the GITHUB_ACTIONS_EXAMPLE_APP_DISTR_FILE_KEY environment variable."
          unset GITHUB_ACTIONS_EXAMPLE_APP_DISTR_FILE_KEY
  

  upload-sdk:
    needs: [ create-branch, increment-version, testing ]
    runs-on: ubuntu-latest
    env:
      GPR_USER: ${{ github.actor }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        flavour: [ DevRelease, UatRelease, PreProdRelease, ProdRelease ]
    steps:
      - name: Checkout branch ${{ needs.create-branch.outputs.branch_name }}"
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-branch.outputs.branch_name }}

      - name: Print working branch value
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          echo "Working branch is: ${{ needs.create-branch.outputs.branch_name }}"

      - name: Set up JDK 20
        uses: actions/setup-java@v4
        with:
          java-version: '20'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Print Java & Gradle version
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          java --version
          ./gradlew --version

      - name: Upload SDK ${{ matrix.flavour }}
        run: ./gradlew uploadToGitHubPkg${{ matrix.flavour }}

  create-tag:
    needs: [ create-branch, increment-version,testing, upload-sdk, upload-app-demo ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Set up Git
        uses: ../actions/setup-git/action.yml

      - name: Git merge ${{ needs.create-branch.outputs.branch_name }} into current
        run: |
          git fetch origin ${{ needs.create-branch.outputs.branch_name }}
          git merge origin/${{ needs.create-branch.outputs.branch_name }}
          
          sed -i "s|^ENABLE_LOCAL_IMPLEMENTATION=.*|ENABLE_LOCAL_IMPLEMENTATION=true|" "gradle.properties"
          sed -i "s|^IS_FIRST_RELEASE=.*|IS_FIRST_RELEASE=false|" "gradle.properties"
          sed -i "s|^IS_FIRST_RELEASE=.*|IS_FIRST_RELEASE=false|" "gradle.properties"

          git add .
          git commit -m "chore: enable local implementation"
          git push

      - name: Git Tag
        id: create_git_tag
        run: |
          gradlePropertyFileName="gradle.properties"
          GIT_TAG_NAME=$(grep -E "^[^#]*BUILD_MAVEN_SDK_VERSION=" "$gradlePropertyFileName" | cut -d'=' -f2-)
          
          echo "GIT_TAG_NAME=$GIT_TAG_NAME" >> $GITHUB_OUTPUT
          
          git tag $GIT_TAG_NAME
          git push origin $GIT_TAG_NAME

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_git_tag.outputs.GIT_TAG_NAME }}
          release_name: Release ${{ steps.create_git_tag.outputs.GIT_TAG_NAME }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false

  clean:
    runs-on: ubuntu-latest
    needs: [ create-branch, increment-version,testing, upload-sdk, upload-app-demo, create-tag ]
    if: always()
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Delete branch
        run: |
          git push origin --delete ${{ needs.create-branch.outputs.branch_name }}