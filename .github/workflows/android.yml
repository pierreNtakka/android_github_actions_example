name: Lib into PKG Registry and App into Firebase App Distr

on:
  workflow_dispatch:
    inputs:
      debug:
        type: boolean
        description: Printa dei valori che aiutano il debug
        default: false

env:
  GRADLE_PROPERTIES_FILENAME: "gradle.properties"
  
jobs:
  create-branch:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.create_branch.outputs.branch_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        uses: ./.github/actions/setup-git

      - name: Create and push new branch
        id: create_branch
        run: |
          NEW_BRANCH="creating-release-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$NEW_BRANCH"
          git push origin "$NEW_BRANCH"
          echo "branch_name=$NEW_BRANCH" >> $GITHUB_OUTPUT
          echo "New branch $NEW_BRANCH created and pushed"

  testing:
    needs: create-branch
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ needs.create-branch.outputs.branch_name }}
    steps:
      - name: Checkout branch ${{ needs.create-branch.outputs.branch_name }}
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-branch.outputs.branch_name }}

      - name: Print working branch value
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          echo "Working branch is: ${{ needs.create-branch.outputs.branch_name }}"
          
      - name: Set up Gradlew
        uses: ./.github/actions/setup-gradle
        with:
          debug: ${{ github.event.inputs.debug }} 

      - name: Execute clean
        run:  echo "./gradlew clean"

      - name: Execute test
        run: echo "./gradlew test"

  increment-version:
    needs: testing
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ needs.testing.outputs.branch_name }}
    steps:
      - name: Checkout branch ${{ needs.testing.outputs.branch_name }}
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.testing.outputs.branch_name }}

      - name: Print working branch value
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          echo "Working branch is: ${{ needs.testing.outputs.branch_name }}"

      - name: Disable local implementation
        run: python .github/scripts/toggle_gradle_local_impl.py --gradleFileName ${{ env.GRADLE_PROPERTIES_FILENAME }} --enable false

      - name: Print Version properties PRE incremented
        if: ${{ github.event.inputs.debug == 'true' }}
        run: python .github/scripts/print_gradle_properties.py --gradleFileName ${{ env.GRADLE_PROPERTIES_FILENAME }}
        
      - name: Increment App and SDK Version
        id: increment_app_sdk_version
        run: python .github/scripts/increment_version.py --gradleFileName ${{ env.GRADLE_PROPERTIES_FILENAME }}

      - name: Print Version properties POST incremented 
        if: ${{ github.event.inputs.debug == 'true' }}
        run: python .github/scripts/print_gradle_properties.py --gradleFileName ${{ env.GRADLE_PROPERTIES_FILENAME }}

      - name: Set up Git
        uses: ./.github/actions/setup-git

      - name: Commit And Push
        run: |
          git add .
          git commit -m "${{ steps.increment_app_sdk_version.outputs.commit_message }}"
          git push

  upload-app-demo:
    needs: increment-version
    outputs:
      branch_name: ${{ needs.increment-version.outputs.branch_name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flavour: [ DevDebug, UatDebug, PreProdDebug, ProdDebug ]
    steps:
      - name: Checkout branch ${{ needs.increment-version.outputs.branch_name }}
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.increment-version.outputs.branch_name }}

      - name: Print working branch value
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          echo "Working branch is: ${{ needs.increment-version.outputs.branch_name }}"

      - name: Create Firebase App Keys
        env:
          APP_DISTR_FILE_CONTENT_KEY: ${{ secrets.APP_DISTR_FILE_CONTENT_KEY }}
        run: python .github/scripts/config_app_distr.py

      - name: Set up Gradlew
        uses: ./.github/actions/setup-gradle
     
      - name: Upload App Demo ${{ matrix.flavour }}
        run: echo "./gradlew uploadToAppDistribution${{ matrix.flavour }}"

      - name: Clean up JSON file and environment variable
        if: always()
        run: python .github/scripts/remove_config_app_dist.py
  
  upload-sdk:
    needs: increment-version
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ needs.increment-version.outputs.branch_name }}
    env:
      GPR_USER: ${{ github.actor }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        flavour: [ DevRelease, UatRelease, PreProdRelease, ProdRelease ]
    steps:
      - name: Checkout branch ${{ needs.increment-version.outputs.branch_name }}
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.increment-version.outputs.branch_name }}

      - name: Print working branch value
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          echo "Working branch is: ${{ needs.increment-version.outputs.branch_name }}"
      
      - name: Set up Gradlew
        uses: ./.github/actions/setup-gradle
          
      - name: Upload SDK ${{ matrix.flavour }}
        run: echo "./gradlew uploadToGitHubPkg${{ matrix.flavour }}"

  reset-local-implementation:
    needs:  [upload-sdk, upload-app-demo ]
    outputs:
      branch_name: ${{ needs.upload-sdk.outputs.branch_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch ${{ needs.upload-sdk.outputs.branch_name }}
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.upload-sdk.outputs.branch_name }}

      - name: Print working branch value
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          echo "Working branch is: ${{ needs.upload-sdk.outputs.branch_name }}"
      
      - name: Print Gradle properties PRE reset
        if: ${{ github.event.inputs.debug == 'true' }}
        run: python .github/scripts/print_gradle_properties.py --gradleFileName ${{ env.GRADLE_PROPERTIES_FILENAME }}

      - name: Enable local implementation
        run: python .github/scripts/toggle_gradle_local_impl.py --gradleFileName ${{ env.GRADLE_PROPERTIES_FILENAME }} --enable true
  
      - name: Set to false is first release
        run: python .github/scripts/not_first_release.py --gradleFileName ${{ env.GRADLE_PROPERTIES_FILENAME }}
    
      - name: Print Gradle properties POST reset
        if: ${{ github.event.inputs.debug == 'true' }}
        run: python .github/scripts/print_gradle_properties.py --gradleFileName ${{ env.GRADLE_PROPERTIES_FILENAME }}

      - name: Set up Git
        uses: ./.github/actions/setup-git
      
      - name: Check for changes
        id: check_changes
        run: |
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit."
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected."
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: ${{steps.check_changes.outputs.changes == 'true'}}
        run: |
          git add .
          git commit -m "chore: enable local implementation"
          git push
  
  create-release:
    needs: reset-local-implementation 
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ needs.reset-local-implementation.outputs.branch_name }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Set up Git
        uses: ./.github/actions/setup-git

      - name: Git merge ${{ needs.reset-local-implementation.outputs.branch_name }} into current
        run: |
          git fetch origin
          git checkout main
          git pull origin main
          git merge origin/${{ needs.reset-local-implementation.outputs.branch_name }}
          git push
        
      - name: Git Tag
        id: create_git_tag
        run: |
          GIT_TAG_NAME=$(grep -E "^[^#]*BUILD_MAVEN_SDK_VERSION=" "$GRADLE_PROPERTIES_FILENAME" | cut -d'=' -f2-)
          
          echo "GIT_TAG_NAME=$GIT_TAG_NAME" >> $GITHUB_OUTPUT
          
          git tag $GIT_TAG_NAME

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_git_tag.outputs.GIT_TAG_NAME }}
          release_name: Release ${{ steps.create_git_tag.outputs.GIT_TAG_NAME }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false

  clean:
    runs-on: ubuntu-latest
    needs: create-release
    if: success()
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4

      - name: Set up Git
        uses: ./.github/actions/setup-git

      - name: Delete branch
        run: |
          echo "git push origin --delete ${{ needs.create-release.outputs.branch_name }}"