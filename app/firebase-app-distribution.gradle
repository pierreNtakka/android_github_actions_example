def firebaseGroupName = "firebase"
def refBuildType = "debug"
def firebaseAppDistributionPrefixTaskName = "appDistributionUpload"
def flavorAppDistrPrefixTaskName = "uploadToAppDistribution"
def uploadToFirebaseTasksName = new ArrayList<String>()

tasks.register('incrementVersion') {
    doLast {
        ant.propertyfile(file: "../gradle.properties") {

            def isFirstRelease = IS_FIRST_RELEASE.toBoolean()

            if (!isFirstRelease) {
                def appDemoVersionCode = APP_DEMO_VERSION_CODE.toInteger()
                appDemoVersionCode = appDemoVersionCode + 1
                APP_DEMO_VERSION_CODE = appDemoVersionCode
                entry(key: "APP_DEMO_VERSION_CODE", value: APP_DEMO_VERSION_CODE.toString())
            }

        }
    }
}

tasks.register('incrementVersionNextRelease') {
    description "Increment versionName and versionCode of App and SDK"
    doLast {
        ant.propertyfile(file: "../gradle.properties") {

            def appDemoVersionCode = APP_DEMO_VERSION_CODE.toInteger()

            if (appDemoVersionCode == 1) {
                def isFirstRelease = IS_FIRST_RELEASE.toBoolean()
                isFirstRelease = false
                IS_FIRST_RELEASE = isFirstRelease
                entry(key: "IS_FIRST_RELEASE", value: IS_FIRST_RELEASE.toString())
            }
        }
    }
}

android.applicationVariants.configureEach { variant ->
    def variantName = "${variant.name.capitalize()}"
    def assembleVariantName = "assemble${variantName}"

    def unitTestTaskName = "test${variantName}UnitTest"
    tasks.named(unitTestTaskName).get().dependsOn(":myTestLibrary:${unitTestTaskName}")

    def appDistributionUploadVariantName = "${firebaseAppDistributionPrefixTaskName}${variantName}"
    tasks.named(appDistributionUploadVariantName).get().dependsOn(assembleVariantName)

    if (variant.buildType.name == refBuildType) {
        uploadToFirebaseTasksName.add(appDistributionUploadVariantName)

        def uploadToFirebaseAppDistrTaskName = "${flavorAppDistrPrefixTaskName}${variantName}"

        tasks.register(uploadToFirebaseAppDistrTaskName) {
            group = firebaseGroupName
            description = "run unit test, assemble ${variantName} and publish app to Firebase App Distibution"
            dependsOn clean.name
            dependsOn unitTestTaskName
            dependsOn assembleVariantName
            dependsOn appDistributionUploadVariantName

            tasks.named(assembleVariantName).get().dependsOn(unitTestTaskName)

            tasks.named(unitTestTaskName).get().mustRunAfter(clean)
            tasks.named(assembleVariantName).get().mustRunAfter(unitTestTaskName)
            tasks.named(appDistributionUploadVariantName).get().mustRunAfter(assembleVariantName)
        }
    }
}


tasks.register("retrieveEnvVariables") {
    description "Increment the api-module SDK versionCode and versionName"
    doLast {
        println("Valore GPR_USER=${System.getenv("GPR_USER")}")
        println("Valore GITHUB_ACTIONS_EXAMPLE_APP_DISTR_FILE_KEY=${System.getenv("GITHUB_ACTIONS_EXAMPLE_APP_DISTR_FILE_KEY")}")
    }
}